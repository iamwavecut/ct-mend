// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	server "github.com/iamwavecut/ct-mend/internal/server"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/iamwavecut/ct-mend/internal/storage"
)

// RESTHandler is an autogenerated mock type for the RESTHandler type
type RESTHandler struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *RESTHandler) Delete(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *RESTHandler) Get(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Post provides a mock function with given fields: _a0, _a1
func (_m *RESTHandler) Post(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *RESTHandler) Put(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Select provides a mock function with given fields: _a0, _a1
func (_m *RESTHandler) Select(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// WithStorageAdapter provides a mock function with given fields: db
func (_m *RESTHandler) WithStorageAdapter(db storage.Adapter) server.RESTHandler {
	ret := _m.Called(db)

	var r0 server.RESTHandler
	if rf, ok := ret.Get(0).(func(storage.Adapter) server.RESTHandler); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.RESTHandler)
		}
	}

	return r0
}

type mockConstructorTestingTNewRESTHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewRESTHandler creates a new instance of RESTHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRESTHandler(t mockConstructorTestingTNewRESTHandler) *RESTHandler {
	mock := &RESTHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
