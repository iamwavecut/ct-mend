// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/iamwavecut/ct-mend/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// DeleteClient provides a mock function with given fields: id
func (_m *Adapter) DeleteClient(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: id
func (_m *Adapter) DeleteProject(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClient provides a mock function with given fields: id
func (_m *Adapter) GetClient(id int) (*storage.Client, error) {
	ret := _m.Called(id)

	var r0 *storage.Client
	if rf, ok := ret.Get(0).(func(int) *storage.Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: id
func (_m *Adapter) GetProject(id int) (*storage.Project, error) {
	ret := _m.Called(id)

	var r0 *storage.Project
	if rf, ok := ret.Get(0).(func(int) *storage.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, connAddr
func (_m *Adapter) Init(ctx context.Context, connAddr string) error {
	ret := _m.Called(ctx, connAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, connAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectClients provides a mock function with given fields:
func (_m *Adapter) SelectClients() ([]*storage.Client, error) {
	ret := _m.Called()

	var r0 []*storage.Client
	if rf, ok := ret.Get(0).(func() []*storage.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectProjects provides a mock function with given fields:
func (_m *Adapter) SelectProjects() ([]*storage.Project, error) {
	ret := _m.Called()

	var r0 []*storage.Project
	if rf, ok := ret.Get(0).(func() []*storage.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectProjectsOfClient provides a mock function with given fields: id
func (_m *Adapter) SelectProjectsOfClient(id int) ([]*storage.Project, error) {
	ret := _m.Called(id)

	var r0 []*storage.Project
	if rf, ok := ret.Get(0).(func(int) []*storage.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertClient provides a mock function with given fields: client
func (_m *Adapter) UpsertClient(client *storage.Client) (*storage.Client, error) {
	ret := _m.Called(client)

	var r0 *storage.Client
	if rf, ok := ret.Get(0).(func(*storage.Client) *storage.Client); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertProject provides a mock function with given fields: project
func (_m *Adapter) UpsertProject(project *storage.Project) (*storage.Project, error) {
	ret := _m.Called(project)

	var r0 *storage.Project
	if rf, ok := ret.Get(0).(func(*storage.Project) *storage.Project); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
