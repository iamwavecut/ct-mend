// Code generated by mockery v2.14.0. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

// DeleteClient provides a mock function with given fields: id
func (_m *MockAdapter) DeleteClient(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: id
func (_m *MockAdapter) DeleteProject(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClient provides a mock function with given fields: id
func (_m *MockAdapter) GetClient(id int) (*Client, error) {
	ret := _m.Called(id)

	var r0 *Client
	if rf, ok := ret.Get(0).(func(int) *Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: id
func (_m *MockAdapter) GetProject(id int) (*Project, error) {
	ret := _m.Called(id)

	var r0 *Project
	if rf, ok := ret.Get(0).(func(int) *Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, connAddr
func (_m *MockAdapter) Init(ctx context.Context, connAddr string) error {
	ret := _m.Called(ctx, connAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, connAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectClients provides a mock function with given fields:
func (_m *MockAdapter) SelectClients() ([]*Client, error) {
	ret := _m.Called()

	var r0 []*Client
	if rf, ok := ret.Get(0).(func() []*Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectProjects provides a mock function with given fields:
func (_m *MockAdapter) SelectProjects() ([]*Project, error) {
	ret := _m.Called()

	var r0 []*Project
	if rf, ok := ret.Get(0).(func() []*Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectProjectsOfClient provides a mock function with given fields: id
func (_m *MockAdapter) SelectProjectsOfClient(id int) ([]*Project, error) {
	ret := _m.Called(id)

	var r0 []*Project
	if rf, ok := ret.Get(0).(func(int) []*Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertClient provides a mock function with given fields: client
func (_m *MockAdapter) UpsertClient(client *Client) (*Client, error) {
	ret := _m.Called(client)

	var r0 *Client
	if rf, ok := ret.Get(0).(func(*Client) *Client); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertProject provides a mock function with given fields: project
func (_m *MockAdapter) UpsertProject(project *Project) (*Project, error) {
	ret := _m.Called(project)

	var r0 *Project
	if rf, ok := ret.Get(0).(func(*Project) *Project); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAdapter(t mockConstructorTestingTNewMockAdapter) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
